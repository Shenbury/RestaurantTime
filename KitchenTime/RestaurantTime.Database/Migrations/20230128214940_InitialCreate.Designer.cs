// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantTime.Database;

#nullable disable

namespace RestaurantTime.Database.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    [Migration("20230128214940_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RestaurantTime.Shared.Models.Chef", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<bool>("IsWorkingToday")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chefs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsWorkingToday = true,
                            Name = "Bob Marley"
                        });
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.ChefRecipe", b =>
                {
                    b.Property<int>("ChefId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateChefLearnedRecipe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ChefId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("ChefRecipe");

                    b.HasData(
                        new
                        {
                            ChefId = 1,
                            RecipeId = 1,
                            DateChefLearnedRecipe = new DateTime(2023, 1, 28, 21, 49, 39, 722, DateTimeKind.Local).AddTicks(7796)
                        });
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Stuff with Tomato Juice",
                            Name = "Bloody Mary"
                        });
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.DrinkOrder", b =>
                {
                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("DrinkId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("DrinkOrder");

                    b.HasData(
                        new
                        {
                            DrinkId = 1,
                            OrderId = 1,
                            TimeOfOrder = new DateTime(2023, 1, 28, 21, 49, 39, 723, DateTimeKind.Local).AddTicks(2032)
                        });
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CookedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBurnt")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCooked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsServed")
                        .HasColumnType("bit");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("UncookedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CookedName = "Jerk Chicken",
                            Description = "Top Notch Jerk Chicken",
                            IsBurnt = false,
                            IsCooked = false,
                            IsEdible = false,
                            IsServed = false,
                            RecipeId = 1,
                            UncookedName = "Raw Chicken and Sauce"
                        });
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.FoodOrder", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("FoodId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("FoodOrder");

                    b.HasData(
                        new
                        {
                            FoodId = 1,
                            OrderId = 1,
                            TimeOfOrder = new DateTime(2023, 1, 28, 21, 49, 39, 722, DateTimeKind.Local).AddTicks(9943)
                        });
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("WaiterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WaiterId");

                    b.ToTable("Guests");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Order", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<bool>("BeenServed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<bool>("HasOrderedFood")
                        .HasColumnType("bit");

                    b.Property<bool>("InKitchen")
                        .HasColumnType("bit");

                    b.Property<bool>("PlatesTakenAway")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("WaiterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("WaiterId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeenServed = false,
                            GuestId = 1,
                            HasOrderedFood = true,
                            InKitchen = false,
                            PlatesTakenAway = false,
                            StartTime = new DateTime(2023, 1, 28, 21, 49, 39, 723, DateTimeKind.Local).AddTicks(2071),
                            WaiterId = 1
                        });
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SuccessRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Some Jerkin Chicken",
                            Name = "Jerk Chicken",
                            SuccessRate = 0.9m
                        });
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Waiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CanCarryPlates")
                        .HasColumnType("bit");

                    b.Property<bool>("CanTakeOrders")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Waiters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanCarryPlates = false,
                            CanTakeOrders = true,
                            Name = "Michael Jackson"
                        });
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.ChefRecipe", b =>
                {
                    b.HasOne("RestaurantTime.Shared.Models.Chef", "Chef")
                        .WithMany()
                        .HasForeignKey("ChefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantTime.Shared.Models.Recipe", "Recipe")
                        .WithMany("ChefRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chef");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.DrinkOrder", b =>
                {
                    b.HasOne("RestaurantTime.Shared.Models.Drink", "Drink")
                        .WithMany("DrinkOrders")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantTime.Shared.Models.Order", "Order")
                        .WithMany("DrinkOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Food", b =>
                {
                    b.HasOne("RestaurantTime.Shared.Models.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.FoodOrder", b =>
                {
                    b.HasOne("RestaurantTime.Shared.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantTime.Shared.Models.Order", "Order")
                        .WithMany("FoodOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Guest", b =>
                {
                    b.HasOne("RestaurantTime.Shared.Models.Waiter", null)
                        .WithMany("Guests")
                        .HasForeignKey("WaiterId");
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Order", b =>
                {
                    b.HasOne("RestaurantTime.Shared.Models.Guest", "Guest")
                        .WithMany("Orders")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantTime.Shared.Models.Waiter", "Waiter")
                        .WithMany("Orders")
                        .HasForeignKey("WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Drink", b =>
                {
                    b.Navigation("DrinkOrders");
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Guest", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Order", b =>
                {
                    b.Navigation("DrinkOrders");

                    b.Navigation("FoodOrders");
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Recipe", b =>
                {
                    b.Navigation("ChefRecipes");
                });

            modelBuilder.Entity("RestaurantTime.Shared.Models.Waiter", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
